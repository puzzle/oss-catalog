name: Build and publish container image

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - "v*.*.*"
    paths-ignore:
      - 'charts/oss-catalog/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  update_db:
    name: Call crawler to update db
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: create paseto token
        run: |
          cd paseto/go
          PASETO_TOKEN="$(go run paseto-generate.go ${{ secrets.PASETO_KEY }})"
          echo "::add-mask::$PASETO_TOKEN"
          echo "PASETO_TOKEN=$PASETO_TOKEN" >> "$GITHUB_ENV"
      - name: call crawler
        run: |
          docker run -e API_BEARER_TOKEN=${{ env.PASETO_TOKEN }} -e API_BASEURL=${{ vars.API_URL }} -e GITHUB_TOKEN=${{ secrets.PAT_TOKEN_GITHUB }} italia/publiccode-crawler:latest

  build_and_publish_image:
    name: Push container image to ghcr
    runs-on: ubuntu-latest
    needs: [update_db]

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6.17.0
        with:
          context: .
          build-args: |
            API_BASEURL=${{ vars.API_URL }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
